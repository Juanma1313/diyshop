"""
Django settings for diyshop_project project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/

=============================================================================
SECURITY WARNING:
The secret data, that can compromise the production system, should be defined
locally in BASE_DIR+"/env.py" file for development.
env.py file has the following form:
        from os import environ
        environ["variable_name_1"] = "value_1"
        environ["variable_name_2"] = "value_2"
        :   :

The following lines are the names of the enviromental variables required.
    DEVELOPMENT
        Values: "True" or "False"
    SECRET_KEY
        Example: "9087zxcv98z798bv^=098zxcv098xzcv09*u2dsd2u+&hddf0^^uj"
    ALLOWED_HOSTS
        Example: "127.0.0.1,localhost, diyshop-1c0dad79f0a0.herokuapp.com"
    DATABASE_URL
        Example: "postgres://cmftklgz:gYdAbasasdasdasdsadsad234@dumbo.db.elep\
            hantsql.com/cmftklgz"
    ACCOUNT_EMAIL_VERIFICATION
        Values: "none" or "mandatory"
    EMAIL_FROM_DEFAULT
        Example: "sales-dep@diyshop.com"
    EMAIL_HOST
        Example: "smtp.gmail.com"
    EMAIL_HOST_USER
        Example: "diyshop@gmail.com"
    EMAIL_HOST_PASSWORD
        Example: "asldknlmalsm"
        Note:  gmail smtp servers do not accept user passwords
                but application passwords can be used.
    STRIPE_PUBLIC_KEY
        Example: "pk_test_51PasdfASDFasdfasDFasdFASDFasdfag$%234weADSfGzdgLg9\
            vUarbSvl1IBriGElYtCE0PIjVDJCkVwCM7v4hascasdcSD43"
    STRIPE_SECRET_KEY
        Example: "sk_test_51PGzdg23re0987asdlkj34ot5245098uwrve09jvlñkwevkjwg\
            SERVWERVwervwerfQErvñmekfvoieLg9vUarbSvaBPVn0TH8"
    STRIPE_WH_SECRET
        Example: "whsec_9ff13b16lñknsadvTWsdafvadv299106f445ef6f269b02236aa87\
            180952ecf8387046f2322cee5d28f"
        Note:To run application in local enironment use stripe cli tool command
            "$ ./stripe listen --forward-to 127.0.0.1:8000/checkout/wh"
    USE_AWS
        Values: "True" or "False"
    AWS_STORAGE_BUCKET_NAME
        Example: "diyshop"
    AWS_S3_REGION_NAME
        Example: "us-west-1"
    AWS_ACCESS_KEY_ID
        Example: "KAIAXYKJQI5SCKKCUDVN"
    AWS_SECRET_ACCESS_KEY
        Example: "iP87W4SDFD/6RWQyiasdf134134feqwwef4EU86U"

IMPORTANT NOTES:
    - NEVER allow the env.py file to be pushed to a public development or
        deployment repositories (Github, GitLab, Bitbucket, etc.)
    - Do not need to difine "DEVELOPMENT" variable in the production system.
        It will be set to "False" by default
    - In the production environment, this variables must be defined as
        environmental varibles at the django server in services like Heroku,
        AWS Activate, Google Cloud, etc.
"""
from pathlib import Path
from os import getenv, path
from django.contrib import messages
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = path.join(BASE_DIR, 'templates')

if path.isfile("env.py"):
    import env
    DEPLOYED = False
    print(">>> Using Local Environment File env.py <<<")
else:
    DEPLOYED = True

# SECURITY WARNING: don't run with debug turned on in production!
DEVELOPMENT = getenv('DEVELOPMENT', False)

DEBUG = getenv('DEBUG', DEVELOPMENT)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('SECRET_KEY', '')


ALLOWED_HOSTS = getenv('ALLOWED_HOSTS', ",").split(",")


# Application definition

INSTALLED_APPS = [
    'admin_interface',
    'colorfield',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'home',
    'products',
    'django_summernote',
    'bag',
    'checkout',
    'profiles',
    'crispy_forms',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'diyshop_project.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap3'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_DIR,
            path.join(TEMPLATES_DIR, 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'bag.contexts.bag_contents',
                'django.template.context_processors.media',
            ],
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# allauth custom configuration settings
ACCOUNT_EMAIL_REQUIRED = True              # Mandatory email registration
ACCOUNT_USERNAME_REQUIRED = True           # Mandatory username registration
ACCOUNT_PRESERVE_USERNAME_CASING = False   # ignore username letter case
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # login with username|email
# Force email verification if not defined otherwise in environment
ACCOUNT_EMAIL_VERIFICATION = getenv('ACCOUNT_EMAIL_VERIFICATION', 'mandatory')
# Let the user type in their email address twice to avoid typo’s.
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True

SITE_ID = 1

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGUT_REDIRECT_URL = '/'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}


# Email configuration settings
# Use the following EMAIL_BACKEND setting for testing
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
if DEVELOPMENT:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print(">>> DEVELOPMENT MODE: Email backed uses console <<<")
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = getenv('EMAIL_HOST', '')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = getenv('DEFAULT_FROM_EMAIL', 'noreplay@')

WSGI_APPLICATION = 'diyshop_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASE_URL = getenv("DATABASE_URL", False)
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    print(">>> DATABASE_URL note defined: Using Local SQLite3 Database <<<")


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': "django.contrib.auth.password_validation"
        ".UserAttributeSimilarityValidator", },
    {'NAME': "django.contrib.auth.password_validation"
        ".MinimumLengthValidator", },
    {'NAME': "django.contrib.auth.password_validation"
        ".CommonPasswordValidator", },
    {'NAME': "django.contrib.auth.password_validation"
        ".NumericPasswordValidator", },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [path.join(BASE_DIR, 'static'), ]

MEDIA_URL = '/media/'
MEDIA_ROOT = path.join(BASE_DIR, 'media')

USE_AWS = bool(getenv("USE_AWS", False))
if USE_AWS:
    # Cache control
    AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000',
    }
    # AWS S3 Bucket Configuration
    AWS_STORAGE_BUCKET_NAME = getenv("AWS_STORAGE_BUCKET_NAME", "")
    AWS_S3_REGION_NAME = getenv("AWS_S3_REGION_NAME", "")
    AWS_ACCESS_KEY_ID = getenv("AWS_ACCESS_KEY_ID", "")
    AWS_SECRET_ACCESS_KEY = getenv("AWS_SECRET_ACCESS_KEY", "")
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    # Static and media files
    STATICFILES_STORAGE = "custom_storages.StaticStorage"
    STATICFILES_LOCATION = "static"
    DEFAULT_FILE_STORAGE = "custom_storages.MediaStorage"
    MEDIAFILES_LOCATION = 'media'

    # Override static and media URLs in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'
else:
    print(">> local static and media files <<")
    STATICFILES_STORAGE = (
        'django.contrib.staticfiles.storage.StaticFilesStorage')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DIY Shop fees for delivery
FREE_DELIVERY_THRESHOLD = 150
STANDARD_DELIVERY_PERCENTAGE = 10

# Stripe
STRIPE_CURRENCY = 'eur'  # US Dolar='usd', CCE Euro = 'eur'
STRIPE_PUBLIC_KEY = getenv('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = getenv('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = getenv('STRIPE_WH_SECRET', '')

SUMMERNOTE_CONFIG = {
    # Using SummernoteWidget - iframe mode, default
    'iframe': True,

    'summernote': {
        'airMode': False,
        'width': '100%',
        'height': '480',
        'lang': None,

        # Toolbar customization
        # https://summernote.org/deep-dive/#custom-toolbar-popover
        'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
        ],
    },

}

if DEBUG:
    import django
    print(f">>> DEBUG MODE: Django Version: {django.get_version()} <<<")
